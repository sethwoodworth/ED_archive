Denial of Service
{{FactAlert|This is serious shit and has been known to cause drama and IRL [[Banhammer|Ban Hammers]]. Actually doing this might get you [[Partyvan|v&]]. The information on page is provided for educational purposes only.}}
<br>
{{FactCat|A Denial of Service attack is any form of attack that prevents legitimate traffic from reaching or being generated by a computer system (most often a webserver).  There are many different types of DoS attack but can be grouped into resource consumption denial of service attacks and bandwidth consumption denial of service attacks. Which ever method is employed the result is the same – legitimate traffic to the server system of serving daemon is denied.}}

{{haxor}}

An attempt to take a website or user off the internets by way of [[brute force]] alone (i.e [[CS3|no computer science III]]). It more often than not is simply flooding the target system with ping requests, but it is also possible to use other types of packets destined for any service on the target system that is accepting connections. To make it even better, the iconic DoS attack comes in several /b/tastic flavours. 
In order to understand how Denial-of-Service attacks are carried out, it is necessary to understand a bit about how connections are created over the internet

==The TCP Handshake==

First off, you need some technical information. Remember IP addresses? They have a use other than getting your ass backraided for posting a [[Personal Army]] request. An IP address (usually) identifies your computer as the recipient of data. In the case of browsing the internet, the web sites you ask to see are sent to your IP address by the web server.
The server has to know your IP address in order to send you anything, though, and your computer needs to know, after you tell it to go to a web page, whether or not the server responded.
On the internet, this is done with a process called the "TCP Handshake." This involves several "packets" of data being exchanged between your computer and the server, illustrated below.

[[File:Tcphandshakebe8.gif]]

SYN-> SYN/ACK -> ACK -> FIN/RST
Afterward, there is a connection open, for the time dictated usually by the systems default TTL (Time to Live) value, over which data can be transferred.


===Exploiting the TCP Handshake===


With the internet spanning many continents, with hundreds of different ways to get from one place to another, some packets get lost for all sorts of reasons (they expire, get mis-routed or a network link is down). If one of the packets in the TCP handshake were to get lost, the connection would fail. Packets get lost quite often, but most of the time, your attempts to view web pages succeed.
Why? Because computers send multiple packets to greatly increase the chance that one will get through at each of the three steps, completing the handshake and getting you connected. Similarly, web servers will send multiple "SYN/ACK" packets when the receive a "SYN" packet. If the computer that started the handshake doesn't respond, the following occurs.

[[File:Tcphandshakebrokehs5.gif‎]]

Most important to remember when exploting the handshake and connection protocol is that servers and any system (routers included) have a maximum number of connection they can track and maintain at once. When the server receives a SYN packet from you, you now take up one allocation of system resources and it will confirm by sending SYN/ACK  packets back to you – system resources that aren’t infinite.

==Different Types of Denial of Service Attacks==

===Newtork Bandwidth Consumption===

First off, the target of an attack is almost always a web server. In order to understand the differences between these two attacks, you must understand, at least on a very basic level, how a web server works. 

====How Web Servers Work====

This is a diagram of a standard web host

[[File:Web Server1.png]]

Notice that people on the internet are asking to see certain websites hosted on the server (Sites 1, 2, and 3; this is a shared hosting plan). The server gets the request, the server looks at the request, finds the requested data, and sends it back out.

All web servers have some physical limit of data that they can process per second, due to a combination of bandwidth limits (i.e. pipe size) and available hardware to utilize the bandwidth and access local data/process commands.  We'll say our server can process 5 Gigabits of data each second (or has a 5 gigabit/second bandwidth limit) - if more data than that is being requested, the server will appear to slow down or stop, because it does not have the ability to send data any faster.

Web hosts/servers do not want to operate at their limit - that means that any additional load on the server, any extra visitors, or, say, being linked to from a popular site, will result in their server slowing down. So, they impose bandwidth limits on the sites hosted. The reasoning here is that if a site is taking up HUGE amounts of bandwidth, its data is "clogging" the available connection, and slowing down the other sites.

Now, let's say Site 1 is linked from a popular blog. Suddenly, Requests for Site 1 increase in number, and the server spends more time processing requests to see Site 1 than the other sites.

[[File:Web Server2.png‎]]

No problem, yet. Now, however, Site 1 is linked to from Slashdot. Requests to see it surge in number.

[[File:Web Server3.png‎]]

Keep in mind that most web hosts have many, many more than three sites on them - at this point, the server is nearing its physical limit. Usually, one of two things will happen next:
* Site 1 exceeds its bandwidth quota, and is suspended

* The web host notices that requests for Site 1 are taking up a huge amount of server resources, and suspends Site 1 to protect Sites 2 and 3 (and 4, and 5, and 6, etc) from being disrupted.
This results in a perculiar legal situation as technically the requests sent to the server are legitmate and so no different to the Slashdot effect except that they are done with malicious intent, either way legitmate traffic is denied service of the requested information and the attack is a success.

====Notes on effectiveness====

The long-term goal of a network banwidth consumption attack is usually to cause the host to run out of monthly bandwidth. This will not work on anyone with a decent plan (read: larger sites) as they may have unmetered lines (this wiki has an unmetered line). If the target has infinite monthly BW, then next best thing is to saturate their pipes. This works by having computers with a total collective downstream speed in excess of the targets upstream speed, each downloading constantly from the target server. (This type of attack is not suitable for large sites, e.g. Google, because keeping such a huge constant download stream is hard, and more effective things can be done with less effort.)

Furthermore, by targeting dynamic pages (especially those that require a database back-end line mysql [e.g. forum search function]) you can effectively rape their CPU, using a lot more of their processing power than just downloading static content.

===Resource Consumption===

====TCP Flooding====

As said before when explaining about explotiing the TCP handhsake it was said that the server or system you’re attacking will only have so much system resources that it can use to perform its job. A Resource consumption attack is based upon forcing the target system to use all of its resources and therefore not allowing anyone else or anyone who legitmately wants to acess it service of the machine.
When the server receives a SYN packet from you, you now take up one 'slot' of its resources and it sends SYN/ACK packets back to you to confirm which will use further resources to do and track.

[[File:Ports01pw8.gif‎]]

If someone else tries to connect while you're talking to the server, they can usually connect because the maximum number of simultaneous connections has not been reached.

[[File:Ports02bn3.gif]]

If the TCP Handshake is completed, with your computer responding with a ACK (OK) packet, then the server is ready to process further requests from you, and is free to process other requests from you.  Afterward, either you or the server ends the connection with a RST packet, thus freeing up a connection 'slot', enabling others to connect.
But what if you send a bunch of SYN packets, and don't respond with ACK, though?

[[File:Synfloodwe2.gif]]

Once you stop sending SYN packets, the server will send SYN/ACKs to all the ones that it's received, your computer will send ACK packets back, and the server will free up all its connections again. Thus, crapflooding only keeps a site down while the flood continues.

If, however, the data being processed by the web server software—or by the OS itself—is far too much, then the server may crash, the CPU crying in the dark.

[[File:Cpuraepxh8.gif]]

====Ping Flooding====

Not to be confused with a Ping of Death attack (now defunct, patched most everywhere since ~1999), this attack consists of saturating the target's bandwidth with ICMP echo packets (pings). It is hoped that the target will respond with reply packets, so that it consumes bandwidth going both ways but consumes system resources too. For this reason ping flooding can fall into both bandwidth consumption and resource consumption attack catergories depending on how exactly its executed. Bonus points can be given for using oversized packets that fragment on route to their target which again help to consume both bandwidth and resources on route and at their destination.

[[File:Pingflood.jpg]]

====UDP Flooding====

This is a very simple type of flood, consisting of simply sending large numbers of UDP packets to the target to use up resources. For instance, the [[rok/i/ts]] and [[PyRAEP/UDP|PyRAEP]] program works by opening lots of UDP connections on lots of random ports. The server must then check for a listening program for each port, and then send a reply packet to the flooder (unless the flooder spoofs his ip).

[[File:Udpflood.jpg‎]]

==Denial of Service Attack Sources==

All of the attacks described in the above sections can come from anywhere and any number of people, and are usually grouped into the following categories:

=== Vanilla DoS ===

[[Image:Mjf f5.jpg|thumb|250px|A typical DoS attack.]]

Whilst being the blanket term for all types of attack, it usually means a single computer actively being used to attack the target system in one of the more useless ways a DoS attack can be performed (read:- ping flooding from a single system). [[Hacker]]-[[Skript kiddies|wannabes]] in their basements will use this, the most [[epic fail guy|failure-ific]] of interwebs butthurt to attempt to take someone down, even when it will simply result in getting [[party van|v&]].

=== DDoS - Distributed Denial of Service ===

[[Image:Successfuldos.JPG|thumb|250px|DoS attacks are serious fucking business.]]

DDoS (with two Ds) refers to a ''Distributed'' Denial-of-Service attack. Literally, this means more than one computer attacking the target. In practice, this generally refers to the use of a [[botnet]] to obtain the many computers needed.

This style of butthurt is administered by any number of virus-ridden 'zombies' hanging around on hidden [[IRC]] channels in amalgamations called '[[botnet]]s' waiting for orders. The '[[Skript kiddies|Zombie master]]' will then issue the order to attack and [[lulz]] will ensue when computers that have no sociological connection to [[Skript kiddies|Zombie master]] or any of the zombies start to attack the target system.

You cannot DDoS with only your home computer. Because it is only one computer. You can, however, DoS. If you DoS at the same time lots of other people are launching DoS attacks, you are 'part' of a DDoS attack. Whenever /i/ does shit 'together' it's a form of DDoS. Fags pronounce it "De De Oh Ess" but [[Hal Turner|this great man]] always says "DeeDos" which is <s>gay</s> <s>better</s> <s>really gay</s> gay, but in a better way.

=== Chicken Noodle DRDoS - Distributed Reflection Denial of Service===

The ultimate in [[anti-lulz]] for the target system is the DRDoS attack. It requires no bot nets and so is rather [[Skiddie|easier to perpetrate]] than any other type of DoS attack. Furthermore, it makes the attacker quite immune to having a [[party van]] drop by their house, Anon finding them and even /b/ getting their details.
The most simple form of this attack method involves using a machine as an unwitting proxy in the attack on another server. This works by sending ICMP packets (ping ICMP echo to be precise) to the 'proxy' machine, but spoofing the source address to that of the target machine. The unwitting proxy computer then floods the target with replies.

A more common (and much more effective) form of this attack involves the attacker sending ACK packets with [[lie|spoofed]] IP's to pretty much anything on the internets (websites, DNS servers, core infrastructure routers, etc...). When the innocent systems receive the ACK packets they believe the target system (the one who's IP is in the packet '''instead of the attackers''') is acknowledging a connection SYN ACK packet from the innocent system. The innocent system will then start sending RST (connection reset) packets to the target system (the one it believes sent the packet to start with) telling it to [[GTFO]] because it will have no record of the target system initiating a connection with it in the normal manner (SYN -> SYN ACK -> ACK -> FIN). 

If the [[Skript kiddies]] sends his [[lie|spoofed]] enough packets to the right places, ie; anything that gets enough traffic for the 'odd' packets to get hidden like Google, Amazon, or Ebay -an alternative is the core internet routers (i.e. Level3 routers)-  it can look like the whole of the internets itself is coming down on the target system with there being little to nothing that can be done. [[tl;dr|The innocent systems will also send several RST packets for every spoofed ACK they receive in an attempt to sort things out which adds an nice attack traffic multiplication effect as well as helping to hide the true source of the attack]], whilst unwittingly blasting the target off the internets with a [[banhammer|Ban Hammer]] of [[catnarok|epic proportions]].

=== Side Notes ===

[[Hacker]]-[[Skript kiddies|wannabes]] often invoke the name "DoS" as an [[internet tough guy|internet threat]]. [[Encyclopedia Dramatica|ED]] is quite often the target of DoS attacks by it's [[butthurt|article subjects]]. While rather lacking in [[lulz]], such attacks are a proof of ED's efficiency when it comes to pissing people off.

Users interested in practicing DoS tactics are encouraged to start with [[ebaumsworld|8.2.118.111]] or even [[You|127.0.0.1]] (do this A lot); these are IP addresses that promote free experimentation and security related attacks as a method of learning about technology.

/r/ing the ip of anontalk. Thoes penofiles must die!

[[anontalk|88.80.5.16]] They are down, and it is unlikely Kimmo will return.

{{warning|text=If you cannot read this, chances are ED is currently being DDoS'ed}}

== Tools ==

=== DoS 5.5 ===

[[Image:Dos5.png|right|250px]]
{{tinyquote|DoS 5.5 and it's previous and future versions are made for educational purposes only. DoS was designed for Stress Testing weakness' in Specific server configurations, to disclose where the my server's were lacking in parsing of massive amounts of connections, for in-order for me to fix that, I developed this program. If you choose to use this program for any illegal, direct or indirect purposes, you're the only one who can be accountable, and you will be left responsible for your own actions. Please use this program at your own Risk. By using DoS 5.5 or any of it's previous or future versions, the author cannot be held liable or responsible for any data loss, or damaged, from either 3rd party downloads or from this site. Thankyou.|''xyr0x'', being a faggot.}}

====Info====
This is a multipurpose Denial of Service tool, which, through sheer volume of use, we have decided to include.  Note that this IS only in binary form, and IS in a shitty language, and IS by xyr0x, so don't be surprised if you become infected with a trojan.  If you want to stay safe, use the tools made specifically FOR anon, BY anon, such as loic, pyraep, longcat, etc. It also has an annoying but that causes the GUI to freeze up for the first 10 minutes or so when its DoSing, it still does its thing, but you have no feedback, thats just awkward.

This shows up on 24/34 antiviruses ( http://anonym.to/http://www.virustotal.com/analisis/4e39c2bf826d781a0f20f7681a952b9d ), though mostly as a flooder, but sometimes as a trojan. However, since it's not for anon, by anon, you may get the shit raped out of you. Use at your own risk.

====Unfagged version====
I made a version that is unfagged, and is detected by less AV's. (it still might be bad, but now your antivirus will not annoy you...)
* Protection removed
* Packed with PECompact
* Deleted faggy mp3

http://anonym.to/http://www.virustotal.com/analisis/c4f3e63acf8e32411072c075a47e2f90d65f389a377df6ebf075e8298357807b-1244089025

==== Download ====
http://anonym.to/http://rapidshare.com/files/240592821/DoS_5.5_Unfagged.rar

====Mirrors====
* [http://anonym.to/http://rapidshare.com/files/5263213/DoS_5.5_Final.rar.html Rapidshare]

=== Hping ===

A tool for custom-crafting packets. Can be used to flood almost any type of packet imaginable.

==== Installation ====

===== Windows =====

If you're running Windows XP and it keeps crashing, set the "compatibility mode" for Windows 98.

[http://anonym.to/http://hping.org/hping2.win32.tar.gz Hping2 for Win32] (Includes source code and executable)

===== Mac =====

[http://anonym.to/http://www.macports.org/install.php Macports]

<pre>sudo port install hping3</pre>

===== Linux =====

[http://anonym.to/http://hping.org/hping3-20051105.tar.gz Hping3 Source Code]

Debian and Ubuntu users type

 apt-get install hping3

Mandriva users type as root

 urpmi hping

==== Usage ====

Regardless of which '''Hping''' you get, the command to flood a target is as follows:

 '''hping'''[2 or 3] [TARGET] -p [PORT] --flood [PACKET TYPE] [OTHER OPTIONS]

You can read the manpage for hping by typing
<pre>man hping[2 or 3]</pre>

Or you can invoke help menu with the --help arg
<pre>root@thegame:~# hping3 --help
usage: hping3 host [options]
  -h  --help      show this help
  -v  --version   show version
  -c  --count     packet count
  -i  --interval  wait (uX for X microseconds, for example -i u1000)
      --fast      alias for -i u10000 (10 packets for second)
      --faster    alias for -i u1000 (100 packets for second)
      --flood      sent packets as fast as possible. Don't show replies.
  -n  --numeric   numeric output
  -q  --quiet     quiet
  -I  --interface interface name (otherwise default routing interface)
  -V  --verbose   verbose mode
  -D  --debug     debugging info
  -z  --bind      bind ctrl+z to ttl           (default to dst port)
  -Z  --unbind    unbind ctrl+z
      --beep      beep for every matching packet received
Mode
  default mode     TCP
  -0  --rawip      RAW IP mode
  -1  --icmp       ICMP mode
  -2  --udp        UDP mode
  -8  --scan       SCAN mode.
                   Example: hping --scan 1-30,70-90 -S www.target.host
  -9  --listen     listen mode
IP
  -a  --spoof      spoof source address
  --rand-dest      random destionation address mode. see the man.
  --rand-source    random source address mode. see the man.
  -t  --ttl        ttl (default 64)
  -N  --id         id (default random)
  -W  --winid      use win* id byte ordering
  -r  --rel        relativize id field          (to estimate host traffic)
  -f  --frag       split packets in more frag.  (may pass weak acl)
  -x  --morefrag   set more fragments flag
  -y  --dontfrag   set dont fragment flag
  -g  --fragoff    set the fragment offset
  -m  --mtu        set virtual mtu, implies --frag if packet size > mtu
  -o  --tos        type of service (default 0x00), try --tos help
  -G  --rroute     includes RECORD_ROUTE option and display the route buffer
  --lsrr           loose source routing and record route
  --ssrr           strict source routing and record route
  -H  --ipproto    set the IP protocol field, only in RAW IP mode
ICMP
  -C  --icmptype   icmp type (default echo request)
  -K  --icmpcode   icmp code (default 0)
      --force-icmp send all icmp types (default send only supported types)
      --icmp-gw    set gateway address for ICMP redirect (default 0.0.0.0)
      --icmp-ts    Alias for --icmp --icmptype 13 (ICMP timestamp)
      --icmp-addr  Alias for --icmp --icmptype 17 (ICMP address subnet mask)
      --icmp-help  display help for others icmp options
UDP/TCP
  -s  --baseport   base source port             (default random)
  -p  --destport   [+][+]<port> destination port(default 0) ctrl+z inc/dec
  -k  --keep       keep still source port
  -w  --win        winsize (default 64)
  -O  --tcpoff     set fake tcp data offset     (instead of tcphdrlen / 4)
  -Q  --seqnum     shows only tcp sequence number
  -b  --badcksum   (try to) send packets with a bad IP checksum
                   many systems will fix the IP checksum sending the packet
                   so you'll get bad UDP/TCP checksum instead.
  -M  --setseq     set TCP sequence number
  -L  --setack     set TCP ack
  -F  --fin        set FIN flag
  -S  --syn        set SYN flag
  -R  --rst        set RST flag
  -P  --push       set PUSH flag
  -A  --ack        set ACK flag
  -U  --urg        set URG flag
  -X  --xmas       set X unused flag (0x40)
  -Y  --ymas       set Y unused flag (0x80)
  --tcpexitcode    use last tcp->th_flags as exit code
  --tcp-timestamp  enable the TCP timestamp option to guess the HZ/uptime
Common
  -d  --data       data size                    (default is 0)
  -E  --file       data from file
  -e  --sign       add 'signature'
  -j  --dump       dump packets in hex
  -J  --print      dump printable characters
  -B  --safe       enable 'safe' protocol
  -u  --end        tell you when --file reached EOF and prevent rewind
  -T  --traceroute traceroute mode              (implies --bind and --ttl 1)
  --tr-stop        Exit when receive the first not ICMP in traceroute mode
  --tr-keep-ttl    Keep the source TTL fixed, useful to monitor just one hop
  --tr-no-rtt       Don't calculate/show RTT information in traceroute mode
ARS packet description (new, unstable)
  --apd-send       Send the packet described with APD (see docs/APD.txt)</pre>

==== Examples ====

SYN flood google.com's port 80

 hping2 google.com -p 80 -i u30000 -S

UDP flood google.com:

 hping3 google.com -p 80 -i u30000 --udp

==== Tutorial ====

http://anonym.to/http://www.darkc0de.com/tutorials/hpingtut.txt

Note: the --rand-source is  a great feature that randomly generates random source IPs, however some routers (linksys for sure) will correct the packet before sending it out, so make sure you double check that, or have a computer directly connected to the Internet source

==== External Links ====

* [http://anonym.to/http://hping.org/ '''Hping''' Homepage]
* [http://anonym.to/http://wiki.hping.org/ '''Hping''' Wiki] Up as of <b>10/17/09</b>



=== UDP Unicorn ===
An open source (C language), Win32 UDP flooding/DoS (Denial of Service) utility with multithreading by Sparky. Uses winsock library to create UDP sockets and flood a target. Raep secret ingredient: Unicorn magic dust.
[[Image:UDPUnicorn.png|right|250px]]

=== Details ===
* Can target one port, or flood random ports.
* You can define a specific packet size, or use random packet sizes.
* You may ping the target, and resolve a hostname to an IP address with Reverse DNS.
* Edit delay, timeout, number of threads, and sockets per thread.
* Can be used to boot over online gaming.

=== External Links ===
* [http://www.youtube.com/watch?v=6i1qk_lzEUA Usage Example]
* [http://udpunicorn.sourceforge.net Download at Sourceforge]
[[Image:UPDUnicornIcon.jpg|120px|thumb]]






=== Development ===
UDP Unicorn is in the production stage, and is stable. More versions may be released with more features.







=== Longcat Flooder ===

'''Longcat Flooder''' is a multi-protocol flooding tool written during the Subeta raids, by the same creator as the newer bandwidth raeping tool, [[Bandwidth_Raep|BWRaeper.NET]]. It quickly became popular amongst Anonymous due to its simplicity in use and powerful features. The protocols supported are TCP (SYN flooding), UDP and HTTP.
[[File:UF.png|200px|thumb]]

Research has shown that SYN and UDP provide the best results. However, using the HTTP flooder can be useful in several situations:

* Web server with limited bandwidth
* Web server with limited CPU power
* Website with search URLs 

Constantly flooding a URL where a search or other heavy SQL command gets executed has proven to be destructive during the Subeta raid. Only several Longcat Flooders were needed to take down the MySQL database when executing search commands.

There are two different types of Longcat Flooder out there. One is a '''standalone''' version and one is a distributed version relying on a central server to provide raep information. The current version of the standalone version of the Longcat Flooder is v2.3 Final. The current version of the '''distributed version''' of the Longcat Flooder Client is 3.0 Beta it's a little unstable but better than 2.3. And the Longcat Flooder Server has version 1.0.

====Download====
'''Some find that 2.2 is better then 2.3; I concur.'''
* http://anonym.to?http://rapidshare.com/files/286320531/Longcat.rar '''All versions, Password = anonymous'''

====Development====
Development of the standalone version has ceased. However development of the distributed version is still going on. '''There is no v2.4 or above for the standalone, those are fake and are trojans.'''

=== Longcat Deathstar ===

[[Image:Longcat ship.jpeg|200px|right|thumb|Anon's Death Star]]

====Wallpapers====

([http://img149.imageshack.us/my.php?image=desktop1024x768ca3.jpg wallpaper)]: The Anonymous Flagship ''[[Longcat]]'' ([http://img62.imageshack.us/img62/2511/longcatdeathstar2.png 1920x1080{branded})] ([http://img511.imageshack.us/img511/8373/longcatdeathstar.png 1920x1080{notbranded})]]]

====Details====
'''Longcat Death Star''' is a project to make a simple and easy to use program that will make organising DDoS raids a whole lot easier. /b/tards will simply need to run one program, which will then connect to a IRC channel and receive updated targets and commands, and then proceed to DDoS the shit out of the said targets.

====Project====
This project is complete, and according to Nigg it runs properly and will DoS a target on command. Look for both client and server versions when it's released.

'''Feature Requests:'''
<br>Stats Monitoring - Display both local and botnet stats on each client interface.
<br>PlugIn Repository - A checklist inside the client settings that allows users to download, enable, disable assorted modules. An example would be to enable SSoD and ping, but disable bwraep (cuz I'm streaming pron). If a new module is developed there is no need to reinstall LCDS, just download and enable the module from the repository.

Currently, According to Nigg, The Client is complete, and functional.

Beta test Stats- http://anonym.to/?http://img41.imageshack.us/img41/4507/chartf.png

====Download====
[http://anonym.to/http://rapidshare.com/files/288300048/LCDS_0.606.rar LCDS]

=== mt_pulse.pl ===

'''mt_pulse.pl''' is a [[Perl]] script which UDP floods an IP. The syntax for running the script is simple:

 SIMPLE PULSING UDP FLOOD
 USAGE:  ./mt_pulse.pl A B
          A: KBPS to pulse (set to your upstream for best result)
          B: Target host or IP. (eg. radicalsroar.com OR 127.0.0.1)

''Note that the A value is in kilobytes per second, not kilobibbyz.''

====Download====
Mirror list:

* [http://anonym.to/http://www.megaupload.com/?d=9VH340YO Megaupload]
* [http://anonym.to/http://www.rapidshare.com/files/52562488/mt_pulse.pl.html Rapidshit]
* [http://anonym.to/http://pastebin.ca/1063534 Pastebin]

===PyRAEP UDP===

[[Image:PyRAEP-UDP.png|right|250px]]
This is a subproject/feature of the larger, unified pyraep project, which works on the basis of a UDP flood attack (see [[Denial of Service]]). It is mostly completed, but like pyraep suffers from an occasional bug when shutting down. Because of multithreading, it works much more efficiently than rok/i/ts, and below is a table illustrating that point.

<table>
<tr>
<td>'''Duration'''</td>
<td>'''Threads'''</td>
<td>'''Loop Size'''</td>
<td>'''% Better'''</td>
</tr>
<tr>
<td>30s</td>
<td>8</td>
<td>15</td>
<td>400%</td>
</tr>
<tr>
<td>30s</td>
<td>15</td>
<td>25</td>
<td>1,100%</td>
</tr>
</table>

====Use====

To use, you need to set three things: a target, a thread number, and a loop size. For the target, it is best to enter an IP address (to avoid dns issues), though a domain name can work too. Now, as far as thread count (first slider) goes, moar is better--up to a point. 8 threads > 4 threads, but 70 threads may very well freeze or not work properly. The next thing that can change the strength of attack is the drone loop size (second slider). Each drone thread will loop as many times as you tell it to before killing itself. More will make the attack more efficient as more threads will operate longer, however a large loop size will make it take a long time to shut pyRaep off.

====Downloads====
* [http://anonym.to/http://www.mediafire.com/?uwry1zdm5z4 Download] (mediafire)
* [http://anonym.to/http://www.python.org/download/ Python] (you're going to need this)


===rok/i/ts===

[[File:Rokits.png|right]]

'''rok/i/ts''' is a Win32 application written by waawaa and Trapdoor used for [[Denial of Service Methods|DoS]]ing. It can be ported to any operating system supporting PHP. However, in version 2, a visual basic launcher was created to make use of a GUI. It uses PHP, which has been compiled down into a 600kb program. A home connection can usually cap out using this, and shit flood a tiny server. The more people hitting the server the better it will go. As of version2 most of the bugs are fixed.

This program works by sending UDP data on lots of random ports on the target server.

====Download====
*[http://anonym.to/http://rapidshare.com/files/221039302/rokits.rar Rapidshat] Password: lrn2postlinks (With required DLLs)

===SlowLoris===

[[File:QSlowLoris.png|right|500px]]

Summary:

*http://anonym.to/?http://ha.ckers.org/slowloris/
*http://anonym.to/?http://ha.ckers.org/blog/20090617/slowloris-http-dos/

====QSlowLoris====


This is C++ with heavy use of Qt libs. I could make a CLI version, but I don't know how the fuck you use sockets in WINAPI, so you still would need to supply QtCore4.dll(2,6MB) and QtNetwork4.dll(1,33MB) with the exe
*Wait, I just reailzed that it can be compressed with upx:
*QSlowloris.exe - 20KB
*QtCore.dll - 903KB
*QtNetwork.dll - 447KB

=====Linux build=====

*http://anonym.to/?http://www.megaupload.com/?d=08RJVYTE


=====Windows build=====

*http://anonym.to/?http://www.megaupload.com/?d=3DV6R4ZL

====Original Version====

This is the original CLI version.<br>
Example usage: ''./slowloris.pl -dns www.president.ir -port 80 -timeout 500 -num 2000''
*  http://www.milw0rm.com/exploits/8976 (perl script)<br>
*  ftp://rlance.ru/Upload/a/slowloris.bin (linux binary created with PAR packer)
Some hosts might ban the Useragent which Slowloris is using. This version pretends to be Mozilla.<br>
*  http://anonymous.pastebay.com/24430

====pyLoris====

PyLoris is a platform independent python version of Slowloris (Limitations for windows (130 sockets) still apply). It runs a little differently than Slowloris, in that it throttles the entire request, allowing users to specify the bandwidth for the connection as well as how large the request is. 

*http://anonym.to/?http://motomastyle.com/pyloris-a-python-implementation-of-slowloris/ 
*http://anonym.to/?http://anonymous.pastebay.com/28113
*http://anonym.to/?http://sourceforge.net/projects/pyloris/

Example usage:
<pre>
python pyloris-1.7.py -l -r POST -s 500000 -g "/fa/pages/?cid=407" www.gerdab.ir \
-u "Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/530.5 (KHTML, like Gecko) Chrome/2.0.172.31 Safari/530.5"
</pre>

===UDPFlooder===

'''UDPFlooder''' is a UDP Flooder(DoSSer) written in Java.
It works by sending multiple junk UDP packets to a target, using multi-threading.

[[File:Judpf.png|right]]
==== How To Use ====

'''Running UDPFlooder'''<br />
Windows: Double click UDPFlooder.jar<br />
Everyone else:<br />
java -jar UDPFlooder.jar


'''Instructions'''<br />
Enter the target IP or hostname<br />
Enter the amount of threads you want to run simultaneously (See Notes)<br />
Press FRAG


'''Recompiling'''<br />
Windows: Run rebuild.bat<br />
Linux/BSD: Run rebuild.sh

Everyone else:
cd /path/to/UDPFlooder/<br />
javac UDPFlooder.java<br />
jar cfm UDPFlooder.jar manifest *.class kingdomLib/*.class res/*



==== Requirements ====

Since it's written in Java, it can be run/recompiled on the following systems:
*Windows 2000/XP/Vista/7
*Linux
*BSD
*Solaris
*Mac


==== Download(Source Code Included) ====

*[http://anonym.to/?http://888chan.org/t/res/123078.html 888Chan]
*[http://anonym.to/?http://sharebee.com/20b12836 Sharebee]
**[http://anonym.to/?http://www.badongo.com/file/16369374 Badongo]
**[http://anonym.to/?http://rapidshare.com/files/263593131/UDPFlooder.zip.html Rapidshare]
**[http://anonym.to/?http://www.megaupload.com/?d=R3YKK2RA Megaupload]
**[http://anonym.to/?http://www.zshare.net/download/63612752cc94c10d/ ZShare]
**[http://anonym.to/?http://depositfiles.com/files/falbqow7q DepositFiles]


===== Checksums =====

UDPFlooder.zip

*MD5 hash: 6c5959d149dd4427ad61164350a1c852
*SHA-1 hash: 4fcf2e9339c31603ed052f2f727001ddbe5797dc


==== Notes ====
* Threads: (Basically how many Flooders you want to run at the same time), by default it's 10, and more than say, 30, will probably cause your system to lag.

===Zap Attack===

A UDP flooder for MAC (does other things, too, btw)

* Download, open prog, File -&gt; UPD Flooder
* Put the IP of the site to attack in Address field
* Set port to 80 (or a specific port number if specified)
* Hit Attack
* ???
* PROFIT!!!

====Download====

[http://anonym.to/http://www.cowfight.com/cf4/zapattack/downloads.html Download]

== See Also ==
*[[Bandwidth Raep]]
*[[Botnet]]
*[[Dangerous kitten]]
*[[ED is slow]]
*[[Eingee.com]]
*[[Chanapocalypse]]
*[[Forkbomb]]
*[[Ping]]
*[[Megaloader]]
*[[Tawker]]
*[[LOIC]]
*[[Lulznet]]
*[[Soup]]

==External Links==
*[http://partyvan.info/wiki/Low_Orbit_Ion_Cannon The Low Orbit Ion Cannon was used to DDOS Hal Turner's website.]
*[http://partyvan.info/wiki/Denial_of_Service_Methods Graphical explanation of DDoS methods (what this article was copied and pasted from)]

{{Takedown}}
{{trolls}}
{{SecurityFaggots}}
[[Category:Trolls]]
[[Category: Internets Phenomena]]
[[Category:Drama-generating techniques]]
[[Category:Softwarez]]
<br>